{
  "Import React": {
    "prefix": "imr",
    "body": ["import * as React from 'react';\n"],
    "description": "Import React"
  },

  "Import React React and": {
    "prefix": "ima",
    "body": ["import React, { $1 } from 'react';\n"],
    "description": "Import React and"
  },

  "Import ReactDOM": {
    "prefix": "imrd",
    "body": ["import ReactDOM from 'react-dom';"],
    "description": "Import ReactDOM"
  },

  "Latest Function Component": {
    "prefix": "lfc",
    "body": [
      "interface $1Props {",
      "\ttitle: string",
      "}\n",
      "const $1 = (props: $1Props) => {",
      "\tconst [title, setTitle] = useState<$1Props['title']>('')\n",
      "\treturn (",
      "\t\t<>",
      "\t\t</>",
      "\t)",
      "}\n",
      "export default $1;"
    ],
    "description": "Latest Function Component"
  },

  "Function Syntax Component": {
    "prefix": "ffc",
    "body": [
      "function $1($2) {",
      "\treturn ( $0 );",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Function Syntax Component"
  },

  "Stateless Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Stateless Function Component"
  },

  "useEffect": {
    "prefix": "uef",
    "body": ["useEffect(() => {", "\t$1", "}, []);"],
    "description": "useEffect Hook"
  },

  "componentWillMount": {
    "prefix": "cwm",
    "body": [
      "//WARNING! To be deprecated in React v17. Use componentDidMount instead.",
      "componentWillMount() {",
      "\t$0",
      "}"
    ],
    "description": "componentWillMount"
  },

  "getDerivedStateFromProps": {
    "prefix": "gds",
    "body": [
      "static getDerivedStateFromProps(nextProps: $1Props, prevState: $1State) {",
      "\t$0",
      "}"
    ],
    "description": "getDerivedStateFromProps"
  },

  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate(prevProps: $1Props, prevState: $1State) {",
      "\t$0",
      "}"
    ],
    "description": "getSnapshotBeforeUpdate"
  },

  "setState": {
    "prefix": "ss",
    "body": ["this.setState({ $1: $2 });"],
    "description": "setState"
  },

  "Declare a new state variable using State Hook": {
    "prefix": "usf",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"],
    "description": "Declare a new state Variable using the State Hook. Hit Tab to apply CamelCase to function"
  },

  "render": {
    "prefix": "ren",
    "body": ["render() {", "\treturn (", "\t\t $0", "\t);", "}"],
    "description": "render"
  },

  "Emotion Starter": {
    "prefix": "emo",
    "body": [
      "import React, { useState } from 'react'",
      "import styled from '@emotion/styled'",
      "import { css } from '@emotion/react'\n",
      "const $1Container = styled.div`",
      "\twidth: 100%;",
      "\theight: 100%;",
      "`\n",
      "interface $1Props {",
      "\ttitle: string",
      "}\n",
      "const $1 = (props: $1Props) => {",
      "\tconst [title, setTitle] = useState<$1Props['title']>('')\n",
      "\treturn (",
      "\t\t<$1Container>",
      "\t\t</$1Container>",
      "\t)",
      "}\n",
      "export default $1\n",
      "const active = css`",
      "\tbackground: red;",
      "`"
    ],
    "description": "Emotion Starter"
  },
  }
}
